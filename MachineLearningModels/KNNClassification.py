import pandas as pd
import numpy as np
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import StratifiedShuffleSplit
import matplotlib.pyplot as plt

# Load csv generated by DatasetGenerator directory
data = pd.read_csv('../DatasetGenerator/DataSets/test.csv')

class Score:
    def __init__(self, accuracy, precision,f1,auc):
        self.accuracy = accuracy
        self.precision = precision
        self.f1 = f1
        self.auc = auc

# Separate features and label
X = data.iloc[:, :-1].values
X = np.concatenate([X, X])
y = data.iloc[:, 20].values
y = np.concatenate([y, y])




# Defining config
randomState = 42
folds = 10

# Separate data into outer training and testing
X_outer_train, X_outer_test, y_outer_train, y_outer_test = train_test_split(X, y, test_size=0.33, random_state=randomState)


# Using stratified sampling on training set
sss = StratifiedShuffleSplit(n_splits=folds, test_size=0.33, random_state=randomState)

# choose k between 1 to 31
k_range = range(1, 31)
k_scores = []


# Hyper parameter tuning for k
for k in k_range:
    accuracy = 0
    precision = 0
    f1 = 0
    auc = 0
    # 10 fold cross validation
    for train_index, test_index in sss.split(X_outer_train, y_outer_train):
        # Create KNN model
        KNN_model = KNeighborsClassifier(n_neighbors=k)
        # Extract training and testing data
        X_inner_train, X_inner_test = X_outer_train[train_index], X_outer_train[test_index]
        y_inner_train, y_inner_test = y_outer_train[train_index], y_outer_train[test_index]
        # train the model and extract scores
        KNN_model.fit(X_inner_train, y_inner_train)
        prediction = KNN_model.predict(X_inner_test)
        accuracy += accuracy_score(y_inner_test, prediction)
        precision += precision_score(y_inner_test, prediction,
                                     zero_division=0, average="weighted")
        f1 += f1_score(y_inner_test, prediction, zero_division=0, average="weighted")
        #auc += roc_auc_score(y_test,prediction,average="weighted",multi_class="ovr")

    # Computer average scores from cross fold
    accuracy = accuracy / folds
    precision = precision / folds
    f1 = f1 / folds
    auc = auc / folds

    # Add these two the array
    k_scores.append(Score(accuracy,precision,f1,auc))


# Display performance measures of model
# print("-------------------")
# print("-------------------")
# print
# print("Accuracy - " + str(accuracy))
# print("Precision - " + str(precision))
# print("F1 - " + str(f1))
# print("AUC - " + str(auc))

# plot accuracy against k
# plt.plot(k_range, list(map(lambda obj: obj.accuracy,k_scores)))
# plt.xlabel('Value of K for KNN')
# plt.ylabel('Cross-Validated Accuracy')
# plt.show()

# plot precision against k
# plt.plot(k_range, list(map(lambda obj: obj.precision,k_scores)))
# plt.xlabel('Value of K for KNN')
# plt.ylabel('Cross-Validated Precision')
# plt.show()

# plot f1 against k
# plt.plot(k_range, list(map(lambda obj: obj.f1,k_scores)))
# plt.xlabel('Value of K for KNN')
# plt.ylabel('Cross-Validated F1 Score')
# plt.show()

# plot roc against k
# plt.plot(k_range, list(map(lambda obj: obj.auc,k_scores)))
# plt.xlabel('Value of K for KNN')
# plt.ylabel('Cross-Validated AUC')
# plt.show()

# Train best model on whole dataset and show classification report
bestKNNModel = KNeighborsClassifier(n_neighbors=15)
bestKNNModel.fit(X_outer_train,y_outer_train)
bestPrediction = bestKNNModel.predict(y_outer_test)
classification_report(y_outer_test,bestPrediction,zero_division=0)



