import pandas as pd
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score
from sklearn.metrics import recall_score
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import StratifiedShuffleSplit
import matplotlib.pyplot as plt
from config import INPUT_CSV_FILENAME, RANDOM_STATE, FOLDS


plt.style.use('ggplot')

# Load csv generated by DatasetGenerator directory
data = pd.read_csv('../DatasetGenerator/DataSets/' + INPUT_CSV_FILENAME)

class Score:
    def __init__(self, accuracy, precision,f1,recall):
        self.accuracy = accuracy
        self.precision = precision
        self.f1 = f1
        self.recall = recall

# Separate features and label
X = data.iloc[:, :-1].values
# X = np.concatenate([X, X])
y = data.iloc[:, 20].values
# y = np.concatenate([y, y])


# Separate data into outer training and testing
X_outer_train, X_outer_test, y_outer_train, y_outer_test = train_test_split(X, y, test_size=0.25, random_state=RANDOM_STATE)


# Using stratified sampling on training set
sss = StratifiedShuffleSplit(n_splits=FOLDS, test_size=0.33, random_state=RANDOM_STATE)

# choose k between 1 to 31
k_range = range(1, 31)
k_scores = []


# Hyper parameter tuning for k
for k in k_range:
    accuracy = 0
    precision = 0
    f1 = 0
    recall = 0
    # 10 FOLDS cross validation
    for train_index, test_index in sss.split(X_outer_train, y_outer_train):
        # Create KNN model
        KNN_model = KNeighborsClassifier(n_neighbors=k)
        # Extract training and testing data
        X_inner_train, X_inner_test = X_outer_train[train_index], X_outer_train[test_index]
        y_inner_train, y_inner_test = y_outer_train[train_index], y_outer_train[test_index]
        # train the model and extract scores
        KNN_model.fit(X_inner_train, y_inner_train)
        prediction = KNN_model.predict(X_inner_test)
        accuracy += accuracy_score(y_inner_test, prediction)
        precision += precision_score(y_inner_test, prediction,
                                     zero_division=0, average="weighted")
        f1 += f1_score(y_inner_test, prediction, zero_division=0, average="weighted")
        recall += recall_score(y_inner_test, prediction, zero_division=0, average="weighted")
        

    # Computer average scores from cross FOLDS
    accuracy = accuracy / FOLDS
    precision = precision / FOLDS
    f1 = f1 / FOLDS
    recall = recall / FOLDS

    # Add these two the array
    k_scores.append(Score(accuracy,precision,f1,recall))

# plot accuracy against k
plt.plot(k_range, list(map(lambda obj: obj.accuracy,k_scores)))
plt.xlabel('Value of K for KNN')
plt.ylabel('Cross-Validated Accuracy')
plt.show()

# plot precision against k
plt.plot(k_range, list(map(lambda obj: obj.precision,k_scores)))
plt.xlabel('Value of K for KNN')
plt.ylabel('Cross-Validated Precision')
plt.show()

# plot recall against k
plt.plot(k_range, list(map(lambda obj: obj.recall,k_scores)))
plt.xlabel('Value of K for KNN')
plt.ylabel('Cross-Validated Recall')
plt.show()

# plot f1 against k
plt.plot(k_range, list(map(lambda obj: obj.f1,k_scores)))
plt.xlabel('Value of K for KNN')
plt.ylabel('Cross-Validated F1 Score')
plt.show()

# Get best K based off best f score
fscores = list(map(lambda obj: obj.f1,k_scores))
bestK = fscores.index(max(fscores)) + 1
print("Best k neighbours found - " + str(bestK))
print("Now trained on full dataset...")
# Train best model on whole dataset and show classification report
bestKNNModel = KNeighborsClassifier(n_neighbors=bestK)
bestKNNModel.fit(X_outer_train,y_outer_train)
bestPrediction = bestKNNModel.predict(X_outer_test)
print(classification_report(y_outer_test,bestPrediction,zero_division=0))
print("Accuracy: ", accuracy_score(y_outer_test,bestPrediction) * 100, "%")
print("Precision: ", precision_score(y_outer_test,bestPrediction,zero_division=0,average="weighted") * 100, "%")
print("Recall Score: ", recall_score(y_outer_test,bestPrediction,zero_division=0,average="weighted"))
print("F1 Score: ", f1_score(y_outer_test,bestPrediction,zero_division=0,average="weighted"))



