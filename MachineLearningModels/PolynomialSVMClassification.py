import pandas as pd
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score
from sklearn.metrics import recall_score
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.model_selection import StratifiedShuffleSplit
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from Score import Score
plt.style.use('ggplot')

# Load csv generated by DatasetGenerator directory
data = pd.read_csv('../DatasetGenerator/DataSets/test.csv')

# Separate features and label
X = data.iloc[:, :-1].values
# X = np.concatenate([X, X])
y = data.iloc[:, 20].values
# y = np.concatenate([y, y])




# Defining config
randomState = 50
folds = 10

# Separate data into outer training and testing
X_outer_train, X_outer_test, y_outer_train, y_outer_test = train_test_split(X, y, test_size=0.25, random_state=randomState)


# Using stratified sampling on training set
sss = StratifiedShuffleSplit(n_splits=folds, test_size=0.33, random_state=randomState)

# choose Degree between 2,3,4,5,6,7,8,9,10
d_range = [2, 3, 4, 5, 6, 7, 8, 9, 10]
poly_svm_scores = []


# Hyper parameter tuning for degree D
for d in d_range:
    accuracy = 0
    precision = 0
    f1 = 0
    recall = 0
    # 10 fold cross validation
    for train_index, test_index in sss.split(X_outer_train, y_outer_train):
        # Create model
        model = SVC(kernel="poly",degree=d)
        # Extract training and testing data
        X_inner_train, X_inner_test = X_outer_train[train_index], X_outer_train[test_index]
        y_inner_train, y_inner_test = y_outer_train[train_index], y_outer_train[test_index]
        # train the model and extract scores
        model.fit(X_inner_train, y_inner_train)
        prediction = model.predict(X_inner_test)
        accuracy += accuracy_score(y_inner_test, prediction)
        precision += precision_score(y_inner_test, prediction,
                                     zero_division=0, average="weighted")
        f1 += f1_score(y_inner_test, prediction, zero_division=0, average="weighted")
        recall += recall_score(y_inner_test, prediction, zero_division=0, average="weighted")
        

    # Computer average scores from cross fold
    accuracy = accuracy / folds
    precision = precision / folds
    f1 = f1 / folds
    recall = recall / folds

    # Add these two the array
    poly_svm_scores.append(Score(accuracy,precision,f1,recall))

# plot accuracy against d
plt.plot(d_range, list(map(lambda obj: obj.accuracy,poly_svm_scores)))
plt.xlabel('Value of D for Poly SVM')
plt.ylabel('Cross-Validated Accuracy')
plt.show()

# plot precision against d
plt.plot(d_range, list(map(lambda obj: obj.precision,poly_svm_scores)))
plt.xlabel('Value of D for Poly SVM')
plt.ylabel('Cross-Validated Precision')
plt.show()

# plot recall against d
plt.plot(d_range, list(map(lambda obj: obj.recall,poly_svm_scores)))
plt.xlabel('Value of D for Poly SVM')
plt.ylabel('Cross-Validated Recall')
plt.show()

# plot f1 against d
plt.plot(d_range, list(map(lambda obj: obj.f1,poly_svm_scores)))
plt.xlabel('Value of D for Poly SVM')
plt.ylabel('Cross-Validated F1 Score')
plt.show()

# Get best D based off best f score
fscores = list(map(lambda obj: obj.f1,poly_svm_scores))
bestD = d_range[fscores.index(max(fscores))]
print("Best D found - " + str(bestD))
print("Now trained on full dataset...")
# Train best model on whole dataset and show classification report
bestModel = SVC(kernel="poly", degree=bestD)
bestModel.fit(X_outer_train,y_outer_train)
bestPrediction = bestModel.predict(X_outer_test)
print(classification_report(y_outer_test,bestPrediction,zero_division=0))
print(accuracy_score(y_outer_test,bestPrediction))
print(precision_score(y_outer_test,bestPrediction,zero_division=0,average="weighted"))
print(recall_score(y_outer_test,bestPrediction,zero_division=0,average="weighted"))
print(f1_score(y_outer_test,bestPrediction,zero_division=0,average="weighted"))